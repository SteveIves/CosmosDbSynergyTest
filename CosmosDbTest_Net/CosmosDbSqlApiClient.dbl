
import System

.ifdef DBLNET
import System.Globalization
import System.Text.RegularExpressions
import System.Security.Cryptography
import System.Text
.else
;import Synergex.SynergyDE
.include "NETSRC:NetWrappers.inc"
.endc

;.array 0

namespace SynPSG.Azure.CosmosDB

    ;;; <summary>
    ;;; A client for the SQL API to Microsoft Azure CosmosDB
    ;;; </summary>
    public class CosmosDbSqlApiClient
        
        public method CosmosDbSqlApiClient
            required in cosmosDbHost, string
            required in cosmosMasterKey, string
        proc
            this.BaseUri = String.Concat("https://",cosmosDbHost.Trim().ToLower())
            this.MasterKey = cosmosMasterKey
            .ifndef DBLNET
            mCosmosApiVersion = "2017-02-22"
            LogFileName = "CosmosDbClient.log"
            .endc
        endmethod

        ;;; <summary>
        ;;; The "master key" to the CosmosDB instance
        ;;; </summary>
        private MasterKey, string

        ;;; <summary>
        ;;; 
        ;;; </summary>
        public setprivate property BaseUri, string
        
        ;;; <summary>
        ;;; 
        ;;; </summary>
        .ifdef DBLNET
        public readonly property CosmosApiVersion, string, "2017-02-22"
        .else
        private mCosmosApiVersion, string
        public property CosmosApiVersion, string
            method get
            proc
                mreturn mCosmosApiVersion
            endmethod
        endproperty
        .endc

        ;;; <summary>
        ;;; 
        ;;; </summary>
        public setprivate property HttpRequestHeaders, [#]string

        ;;; <summary>
        ;;; 
        ;;; </summary>
        public setprivate property HttpResponseBody, string

        ;;; <summary>
        ;;; 
        ;;; </summary>
        public setprivate property HttpResponseHeaders, [#]string

        ;;; <summary>
        ;;; 
        ;;; </summary>
        public setprivate property HttpStatusCode, int

        ;;; <summary>
        ;;; 
        ;;; </summary>
        public setprivate property HttpStatusText, string

        ;;; <summary>
        ;;; 
        ;;; </summary>
        .ifdef DBLNET
        public readwrite property LogFileName, string, "CosmosDbClient.log"
        .else
        public readwrite property LogFileName, string
        .endc

        ;;; <summary>
        ;;; 
        ;;; </summary>
        public readwrite property LoggingEnabled, boolean, false

        ;;; <summary>
        ;;; Was the last operation successful
        ;;; </summary>        
        public setprivate property Success, boolean, false

        ;; These variables are used to make HTTP calls and are shared by all of the public methods below
        private tempStatusCode, int
        private tempStatusText, string

        public method Create, boolean
            required in resourcePath, string
            required in resourceData, string
        proc
            mreturn this.doPost(resourcePath,resourceData)
        endmethod

        public method Read, boolean
            required in resourcePath, string
        proc
            begin
                data requestUrl, string, String.Concat(this.BaseUri,resourcePath)
                data responseBody, string
                data responseHeaders, [#]string

                this.HttpRequestHeaders = this.getHttpHeaders("GET",requestUrl)
                this.HttpStatusCode = (tempStatusCode = %http_get(requestUrl,,responseBody,tempStatusText,this.HttpRequestHeaders,responseHeaders,this.LogFileName)) ? tempStatusCode : 200
                this.HttpStatusText = (tempStatusText!=^null) ? tempStatusText : "OK"
                this.HttpResponseBody = responseBody
                this.HttpResponseHeaders = responseHeaders
                this.Success = (this.HttpStatusCode == 200)

                mreturn this.Success                
            end
        endmethod

        public method Update, boolean
            required in resourcePath, string
            required in resourceData, string
        proc
            begin
                data requestUrl, string, String.Concat(this.BaseUri,resourcePath)
                data responseBody, string
                data responseHeaders, [#]string

                this.HttpRequestHeaders = this.getHttpHeaders("PUT",requestUrl)
                this.HttpStatusCode = (tempStatusCode = %http_put(requestUrl,,resourceData,responseBody,tempStatusText,this.HttpRequestHeaders,this.LogFileName,,,,,,,responseHeaders)) ? tempStatusCode : 200
                this.HttpStatusText = (tempStatusText != ^null) ? tempStatusText : "OK"
                this.HttpResponseBody = responseBody
                this.HttpResponseHeaders = responseHeaders
                this.Success = (this.HttpStatusCode == 200)

                mreturn this.Success
            end
        endmethod

        public method Delete, boolean
            required in resourcePath, string
        proc
            begin
                data requestUrl, string, String.Concat(this.BaseUri,resourcePath)
                data requestBody, string
                data responseBody, string
                data responseHeaders, [#]string

                this.HttpRequestHeaders = this.getHttpHeaders("DELETE",requestUrl)
                this.HttpStatusCode = (tempStatusCode = %http_delete(requestUrl,,requestBody,responseBody,tempStatusText,this.HttpRequestHeaders,this.LogFileName,,,,,,,responseHeaders)) ? tempStatusCode : 200
                this.HttpStatusText = (tempStatusText != ^null) ? tempStatusText : "OK"
                this.HttpResponseHeaders = responseHeaders
                this.HttpResponseBody = responseBody
                this.Success = (this.HttpStatusCode == 204)

                mreturn this.Success
            end
        endmethod

        public method Query, boolean
            required in resourcePath, string
            required in resourceData, string
        proc
            mreturn this.doPost(resourcePath,resourceData,true)
        endmethod

        .region "Helper Methods"

        ;;; <summary>
        ;;; 
        ;;; </summary>
        ;;; <param name="resourcePath"></param>
        ;;; <param name="resourceData"></param>
        ;;; <param name="isQuery"></param>
        ;;; <returns></returns>
        private method doPost, boolean
            required in resourcePath, string
            required in resourceData, string
            .ifdef DBLNET
            default in isQuery, boolean, false
            .else
            optional in aIsQuery, boolean
            .endc
        proc
            begin
                .ifndef DBLNET
                data isQuery, boolean, (^passed(aIsQuery) && aIsQuery) ? true : false
                .endc
                data successCode, int, isQuery  ? 200 : 201
                data requestUrl, string, String.Concat(this.BaseUri,resourcePath)
                data responseBody, string
                data responseHeaders, [#]string

                this.HttpRequestHeaders = this.getHttpHeaders("POST",requestUrl,isQuery)
                this.HttpStatusCode = (tempStatusCode = %http_post(requestUrl,,resourceData,responseBody,tempStatusText,this.HttpRequestHeaders,responseHeaders,this.LogFileName)) ? tempStatusCode : 200
                this.HttpStatusText = (tempStatusText!=^null) ? tempStatusText : "OK"
                this.HttpResponseHeaders = responseHeaders
                this.HttpResponseBody = responseBody
                this.Success = (this.HttpStatusCode == successCode)

                mreturn this.Success
                
            end
        endmethod

        ;;; <summary>
        ;;; 
        ;;; </summary>
        ;;; <param name="httpMethod"></param>
        ;;; <param name="httpUri"></param>
        ;;; <param name="isQuery"></param>
        ;;; <returns></returns>
        private method getHttpHeaders, [#]string
            required in httpMethod, string
            required in httpUri, string
            .ifdef DBLNET
            default in isQuery, boolean, false
            .else
            optional in isQuery, boolean
            .endc
        proc
            begin
                data rfc1123time, string, getRfc1123Time()

                using httpMethod.ToUpper() select
                ("GET"),
                begin
                    data result, [#]string, new string[#] {
                    &    "Accept: application/json",
                    &    "Authorization: " + getAuthHeader(httpMethod,httpUri,rfc1123time),
                    &    "Cache-Control: no-cache",
                    &    "User-Agent: Synergy " + %VERSN,
                    &    "x-ms-date: " + rfc1123time,
                    &    "x-ms-version: " + this.CosmosApiVersion
                    &    }
                    mreturn result
                end
                ("POST"),
                begin
                    if (isQuery) then
                    begin
                        mreturn new string[#] {
                        &    "Accept: application/json",
                        &    "Authorization: " + getAuthHeader(httpMethod,httpUri,rfc1123time),
                        &    "Cache-Control: no-cache",
                        &    "Content-Type: application/query+json",
                        &    "User-Agent: Synergy " + %VERSN,
                        &    "x-ms-date: " + rfc1123time,
                        &    "x-ms-documentdb-isquery: true",
                        &    "x-ms-version: " + this.CosmosApiVersion
                        &    }
                    end
                    else
                    begin
                        mreturn new string[#] {
                        &    "Accept: application/json",
                        &    "Authorization: " + getAuthHeader(httpMethod,httpUri,rfc1123time),
                        &    "Cache-Control: no-cache",
                        &    "Content-Type: application/json",
                        &    "User-Agent: Synergy " + %VERSN,
                        &    "x-ms-date: " + rfc1123time,
                        &    "x-ms-version: " + this.CosmosApiVersion
                        &    }
                    end
                end
                ("PUT"),
                begin
                    mreturn new string[#] {
                    &    "Accept: application/json",
                    &    "Authorization: " + getAuthHeader(httpMethod,httpUri,rfc1123time),
                    &    "Cache-Control: no-cache",
                    &    "Content-Type: application/json",
                    &    "User-Agent: Synergy " + %VERSN,
                    &    "x-ms-date: " + rfc1123time,
                    &    "x-ms-version: " + this.CosmosApiVersion
                    &    }
                end
                ("DELETE"),
                begin
                    mreturn new string[#] {
                    &    "Authorization: " + getAuthHeader(httpMethod,httpUri,rfc1123time),
                    &    "User-Agent: Synergy " + %VERSN,
                    &    "x-ms-date: " + rfc1123time,
                    &    "x-ms-version: " + this.CosmosApiVersion
                    &    }
                end
                endusing

                ;;Shouldn't get here!
                throw new ApplicationException("Unsupported HTTP method in getHttpHeaders!")
            end
        endmethod

        ;;; <summary>
        ;;; 
        ;;; </summary>
        ;;; <returns></returns>
        private method getRfc1123Time, string
        proc
            begin
                ;; Store the current date and time as an RFC1123 format for the request
                ;; Example: Mon, 13 May 2019 23:29:29 GMT
                .ifdef DBLNET
                data dateFormat, string, new CultureInfo("en-US",false).DateTimeFormat.RFC1123Pattern
                mreturn DateTime.Now.ToUniversalTime().ToString(dateFormat)
                .else
                ;ddd, dd MMM yyyy HH:mm:ss GMT
                ;Wed, 15 May 2019 23:14:47 GMT
                data isDst, int
                data gmtOffset, int, %timezone(,isDst)
                data utcOffset, int, isDst ? gmtOffset + 60 : gmtOffset
                data now, a20, %datetime(utcOffset)
                mreturn dayFromDate(^d(now(1:8))) + ", " + now(7:2) + " " + monthName(^d(now(5:2))) + " " + now(1:4) + " " + %string(^d(now(9:6)),"XX:XX:XX GMT")
                .endc
            end
        endmethod

        .ifndef DBLNET

        private method dayFromDate, string
            required in date, n
        proc
            using %wkday(date) select
            (1), mreturn "Sun"
            (2), mreturn "Mon"
            (3), mreturn "Tue"
            (4), mreturn "Wed"
            (5), mreturn "Thu"
            (6), mreturn "Fri"
            (7), mreturn "Sat"
            endusing
        endmethod

        private method monthName, string
            required in monthNumber, n
        proc
            using monthNumber select
            (1),  mreturn "Jan"
            (2),  mreturn "Feb"
            (3),  mreturn "Mar"
            (4),  mreturn "Apr"
            (5),  mreturn "May"
            (6),  mreturn "Jun"
            (7),  mreturn "Jul"
            (8),  mreturn "Aug"
            (9),  mreturn "Sep"
            (10), mreturn "Oct"
            (11), mreturn "Nov"
            (12), mreturn "Dec"
            endusing
        endmethod

        .endc

        private method getAuthHeader, string
            required in httpVerb, string
            required in requestUrl, string
            required in rfc1123time, string
        proc
            begin
                ;; Grab the request url
                data url, string, requestUrl.Trim()

                ;; And remove the protocol and host portion, leaving just the request path starting "/dbs"
                .ifdef DBLNET
                data strippedUrl, string, new Regex("^https?://[^/]+/").Replace(url, "/")
                .else
                data stripStartIndex, int, url.IndexOf("/",url.IndexOf("://")+3)
                data strippedUrl, string, url.Substring(stripStartIndex,url.Length-stripStartIndex)
                .endc

                ;; Push the parts down into an array so we can determine if the call is on a specific item
                ;; or if it is on a resource (odd would mean a resource, even would mean an item)
                data strippedParts, [#]string, strippedUrl.Split("/")
                data trueStrippedCount, int, strippedParts.Length - 1

                ;; Define resourceId and type now so we can assign based on the amount of levels
                data resourceId, string, ""
                data resType, string, ""

                ;; 
                .ifdef DBLNET
                if (trueStrippedCount .mod. 2) then
                .else
                if ((trueStrippedCount & 1) != 0) then
                .endc
                begin
                    ;; It's odd so it's a resource request

                    ;; Assign resource type to the last part we found.
                    resType = strippedParts[trueStrippedCount+1]

                    if (trueStrippedCount > 1)
                    begin
                        ;; Pull out the resource id by searching for the last slash and substringing to it.
                        data lastPartIndex, int, strippedUrl.lastIndexOf("/")
                        resourceId = strippedUrl.Substring(1,lastPartIndex-1)
                    end
                end
                else
                begin
                    ;; It's even so it's a resource item request

                    ;; Assign resource type to the part before the last we found (last is resource id)
                    resType = strippedparts[trueStrippedCount]

                    ;; Finally remove the leading slash which we used to find the resource if it was only one level deep.
                    strippedUrl = strippedUrl.Substring(1)

                    ;; Assign our resourceId
                    resourceId = strippedUrl
                end

                begin
                    ;; Get the HTTP verb
                    data verb, string, httpVerb.Trim().ToLower()

                    ;; Assign our RFC 1123 date
                    data date, string, rfc1123time.ToLower()

                    ;; Parse the Base64 encoded key back to text
                    .ifdef DBLNET
                    data key, [#]byte, Convert.FromBase64String(this.MasterKey)
                    ;.else
                    ;TODO: I'm guessing this isn't right!
                    ;data key, string, Synergex.SynergyDE.DataEncoding.FromBase64(this.MasterKey)
                    .endc

                    ;; Build up the request text ready to be signed with the master key
                    data text, string, verb + %char(10) +  resType.ToLower() + %char(10) + resourceId + %char(10) + date + %char(10) + %char(10)

                    ;; create the signature from build up request text
                    .ifdef DBLNET
                    disposable data hmac, @HMACSHA256, new HMACSHA256(key)
                    data signatureBytes, [#]byte, hmac.ComputeHash(Encoding.UTF8.GetBytes(text))
                    .else
                    data hasher, @HmacSha256Hash, new HmacSha256Hash(this.MasterKey)
                    data signatureBytes, string, hasher.ComputeHash(text)
                    .endc

                    ;; back to base 64 bits
                    .ifdef DBLNET
                    data base64Bits, string, Convert.ToBase64String(signatureBytes)
                    .else
                    data base64Bits = signatureBytes
                    .endc

                    ;; Format our authentication token and URI encode it.
                    .ifdef DBLNET
                    data retval, string, Uri.EscapeDataString("type=master&ver=1.0&sig="+base64Bits)
                    .else
                    data retval, string, this.urlEncode("type=master&ver=1.0&sig="+base64Bits)
                    .endc
                     mreturn retval
                end
            end
        endmethod

        .ifndef DBLNET
        private method urlEncode, string
            required in a_instr, a

            .align
            stack record
                mh		,i4			;Memory handle
                mc		,i4			;Memory content pointer
                count	,i4			;Loop counter
                dchr	,d3			;ASCII character number (demimal)
            endrecord

            structure chr
                ,a1
            endstructure

        proc
            clear mc

            ;Allocate dynamic memory for return string
            mh = %mem_proc(DM_ALLOC+DM_BLANK, %trim(a_instr)*3 )

            for count from 1 thru %trim(a_instr)
            begin

                dchr = %decml(a_instr(count:1))

                using dchr select
			
                ;Replace spaces with +
                (32),
                    ^m(chr[mc+=1],mh) = "+"

                ;Replace other reserved characters with their hexadecimal value
                (9, 33 thru 41, 43, 44, 47, 58 thru 64, 91 thru 96, 123 thru 126),
                begin
                    ^m(chr[mc+1](1:3),mh) = "%" + %hex(dchr,1)
                    mc+=3
                end
			
                ;Leave other characters unchanged
                (),
                    ^m(chr[mc+=1],mh)=a_instr(count:1)
                endusing

            end

            ;Trim memory
            mh = %mem_proc(DM_RESIZ,mc,mh)

            ;Note: The memory handle "mh" can not be explicitly released as it is
            ;required to provide the return value of the function.  However, the
            ;handle is NOT defined as static, so it will be explicitly released
            ;during the MRETURN processing.
		
            mreturn (string)^m(mh)

        endmethod
        .endc
            
        .endregion

    endclass

endnamespace
